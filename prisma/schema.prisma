// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(cuid())
  name             String
  username         String?        @unique
  bio              String?
  email            String?        @unique
  emailVerified    DateTime?
  image            String?
  coverImage       String?
  profileImage     String?
  hashedPassword   String?
  hasNotifications Boolean?
  followers        Follower[]
  posts            Post[]
  comments         Comment[]
  notifications    Notification[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Follower {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id       String    @id @default(cuid())
  body     String
  userId   String
  likes    Like[]
  comments Comment[]
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  notifications Notification[]
}

model Like {
  id            String         @id @default(cuid())
  userId        String
  postId        String
  notifications Notification[]

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Comment {
  id     String @id @default(cuid())
  body   String
  userId String
  postId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id     String  @id @default(cuid())
  body   String
  userId String
  postId String?
  likeId String?
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post?    @relation(fields: [postId], references: [id])
  like      Like?    @relation(fields: [likeId], references: [id])
}
